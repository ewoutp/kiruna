#!/bin/bash

# Fail on errors
set -e

# Helper to parse JSON content
function jsonValue() {
	KEY=$1
	num=$2
	awk -F"[,:}]" '{for(i=1;i<=NF;i++){if($i~/\042'$KEY'\042/){print $(i+1)}}}' | tr -d '"' | sed -n ${num}p | sed 's/^ *//'
}

# Check requirements
if [ ! -f package.json ]; then
	echo "package.json file not found"
	exit 1
fi

if [ ! -f Dockerfile ]; then
	echo "Dockerfile file not found"
	exit 1
fi

# Get package name
NAME=`cat package.json|jsonValue name 1`
TAG=`cat package.json|jsonValue version 1`
IMAGE=$NAME

# Prepare build directory
CACHE_DIR=/tmp/dib/images/$NAME
rm -Rf $CACHE_DIR
mkdir -p $CACHE_DIR

# Copy files to build directory
RSYNC_OPTS="-a --delete"
if [ -e .git ]; then
	RSYNC_OPTS="$RSYNC_OPTS --exclude .git"
fi
if [ -e Gruntfile.js ]; then
	RSYNC_OPTS="$RSYNC_OPTS --exclude Gruntfile.js"
fi
if [ -e .gitignore ]; then
	RSYNC_OPTS="$RSYNC_OPTS --exclude-from .gitignore --exclude .gitignore"
fi
if [ -e .npmignore ]; then
	RSYNC_OPTS="$RSYNC_OPTS --exclude-from .npmignore --exclude .npmignore"
fi
if [ -e node_modules ]; then
	RSYNC_OPTS="$RSYNC_OPTS --include node_modules"
fi
rsync $RSYNC_OPTS . $CACHE_DIR

# Prepare for production
if [ -e node_modules ]; then
	cd $CACHE_DIR
	npm prune --production -q
fi	

# Build temporary docker image
docker build -t $IMAGE .

# Add files to image
ID=$(tar cC $CACHE_DIR . --exclude=Dockerfile | docker run -i -a stdin $NAME /bin/bash -c "mkdir -p /app && tar -xC /app")
test $(docker wait $ID) -eq 0
docker commit $ID $NAME > /dev/null

# Restore original CMD
mkdir -p $CACHE_DIR/tmp
echo "FROM $NAME" > $CACHE_DIR/tmp/Dockerfile
cat $CACHE_DIR/Dockerfile | grep -vE '^\s*(ADD|RUN|FROM|ONBUILD|COPY)\s' >> $CACHE_DIR/tmp/Dockerfile
cd $CACHE_DIR/tmp
docker build -t $IMAGE .
if [ ! -z $TAG ]; then
	docker tag $IMAGE $NAME:$TAG
fi

# Cleanup
#rm -Rf $CACHE_DIR

# Done
echo "Created $IMAGE $TAG"
