// grunt-release
// ==========

"use strict";

var path = require('path');

module.exports = function(grunt) {
    grunt.config.merge({
    pkg: grunt.file.readJSON('package.json'),
    gitpush: {
      release: {
        options: {}
      },
      tags: {
        options: {
          tags: true
        }
      },
    },
    gittag: {
      release: {
        options: {
          tag: '<%= grunt.file.readJSON("package.json").version %>',
          message: 'Tagging release <%= grunt.file.readJSON("package.json").version %>'
        }
      }
    },
    checkrepo: {
      bump: {
        // Workarea must be clean
        clean: true,
      },
      release: {
        // Workarea must be clean
        clean: true,
      },
      deploy: {
        // Workarea must be clean and tagged
        clean: true,
        tagged: true
      }
    },
    bump: {
      options: {
        files: ['package.json'],
        commit: true,
        commitMessage: 'Updated version to %VERSION%',
        createTag: false,
        push: false
      }
    },
    publish: {
      main: {
        src: ['.']
      }
    }
  });

  function loadNpmTasks(name) {
    var cwd = process.cwd();
    if (grunt.file.isDir(path.join(cwd, 'node_modules', name))) {
      // Found at root level, use from there
      grunt.loadNpmTasks(name);
    } else {
      // Load locally
      process.chdir(path.join(__dirname, '..'));
      grunt.loadNpmTasks(name);
      process.chdir(cwd);
    }
  }


  loadNpmTasks('grunt-gitinfo');
  loadNpmTasks('grunt-bump');
  loadNpmTasks('grunt-checkbranch');
  loadNpmTasks('grunt-checkrepo');
  loadNpmTasks('grunt-git');
  loadNpmTasks('grunt-publish');

  // Register task used to test if the current state of the repos is valid for deployment
  grunt.registerTask('check-deploy', ['checkrepo:deploy']);


  // Register release task
  var bumpTasks = ['checkrepo:bump', 'bump:patch'];
  grunt.registerTask('default-bump', bumpTasks);

  var releaseTasks = ['default-bump', 'checkrepo:release', 'gittag:release', 'gitpush:release', 'gitpush:tags' ];
  grunt.registerTask('git-release', releaseTasks);
  grunt.registerTask('npm-release', ['git-release', 'check-deploy', 'publish:main']);

  grunt.registerTask('default-release', 'npm-release');
  grunt.registerTask('release', ['default-release']);
};
