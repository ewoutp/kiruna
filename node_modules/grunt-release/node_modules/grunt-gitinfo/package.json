{
  "name": "grunt-gitinfo",
  "description": "Get Git info from a working copy and populate grunt.config with the data",
  "version": "0.1.6",
  "homepage": "https://github.com/damkraw/grunt-gitinfo",
  "author": {
    "name": "Damian Krawczyk",
    "email": "mail@damiankrawczyk.pl"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/damkraw/grunt-gitinfo.git"
  },
  "bugs": {
    "url": "https://github.com/damkraw/grunt-gitinfo/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/damkraw/grunt-gitinfo/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "dependencies": {
    "lodash": "~2.4.1",
    "async": "~0.2.9",
    "getobject": "~0.1.0"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.1.2",
    "grunt": "~0.4.1"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "keywords": [
    "gruntplugin"
  ],
  "readme": "# grunt-gitinfo\n\n> Get Git info from a working copy and populate grunt.config with the data\n\n## Getting Started\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-gitinfo --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-gitinfo');\n```\n\n## The \"gitinfo\" task\n\n### Overview\nInspired by grunt-svninfo. In your project's Gruntfile, add a section named `gitinfo` to the data object passed into `grunt.initConfig()`.\nExecuting the task will populate grunt.config.gitinfo with repository data described below. You can use gitinfo object in your build as e.g. `<%= gitinfo.local.branch.current.SHA %>`.\nThe resulting `gitinfo` object has the following structure:\n\n\n```js\n{\n    local : {\n        branch : {\n            current : {\n                SHA              : \"Current HEAD SHA\",\n                shortSHA         : \"Current HEAD short SHA\",\n                name             : \"Current branch name\",\n                currentUser      : \"Current git user\" ,\n                lastCommitTime   : \"Last commit time\",\n                lastCommitAuthor : \"Last commit author\",\n                lastCommitNumber : \"Last commit number\"\n            }\n        }\n    },\n    remote : {\n        origin : {\n            url : \"Branch Url\"\n        }\n    },\n    (custom command values)\n}\n```\n\n### Options\n\n#### cwd\nType: `String`\n\nAllows to specify a cwd (current working directory) path repository. The default directory is the where you run grunt from (`'.'`).\n\nExample:\n``` js\ngitinfo: {\n    options: {\n        cwd: './myproject/ishere'\n    },\n    ...\n}\n```\n\n### Custom commands\n\nType: `Object`\n\nAllows to specify a custom git command.\n\nExample:\n``` js\ngitinfo: {\n    commands: {\n        'my.custom.command' : ['arg1', 'arg2', (...)] // git arg1 arg2 (...)\n    }\n}\n```\n\nThis will populate `<%= gitinfo.my.custom.command %>` with `git arg1 arg2` output.\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n0.1.6\n-----\n- Removed tag from commands list\n- \\#13 Adding lastCommitNumber command\n- \\#12 Logging through grunt.log API\n- \\#9 Extend existing gitinfo config\n\n\n\n",
  "readmeFilename": "README.md",
  "_id": "grunt-gitinfo@0.1.6",
  "_from": "grunt-gitinfo@~0.1.4"
}
