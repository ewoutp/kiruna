{
  "name": "grunt-checkrepo",
  "description": "Check the state of repository.",
  "version": "0.1.0",
  "homepage": "https://github.com/Darsain/grunt-checkrepo",
  "author": {
    "name": "Darsain",
    "url": "http://darsa.in"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/Darsain/grunt-checkrepo.git"
  },
  "bugs": {
    "url": "https://github.com/Darsain/grunt-checkrepo/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">=0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "shelljs": "~0.2.5",
    "semver": "~2.1.0"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.6.4",
    "grunt": "~0.4.1"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "keywords": [
    "gruntplugin"
  ],
  "readme": "# grunt-checkrepo\n\nCheck the state of repository.\n\nTask will cancel grunt tasks queue when repository state doesn't comply with your requirements. You can look at it as\na simple repository linting.\n\nThis is a [Grunt](http://gruntjs.com/) 0.4 plugin. If you haven't used [Grunt](http://gruntjs.com/) before, be sure to\ncheck out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a\n[Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins.\n\n## Installation\n\nUse npm to install and save the plugin into `devDependencies`.\n\n```shell\nnpm install grunt-checkrepo --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-checkrepo');\n```\n\n## Configuration\n\nIn your project's Gruntfile, add a section named `checkrepo` to the data object passed into `grunt.initConfig()`. This\nis a multitask task and accepts multiple targets.\n\n```js\ngrunt.initConfig({\n\tcheckrepo: {\n\t\tfoo: {\n\t\t\t// Foo target options\n\t\t},\n\t\tbar: {\n\t\t\t// Bar target options\n\t\t},\n\t},\n});\n```\n\nThere are no default options. Each target property is a check that will be run, and its value is a required state.\n\n## Available checks\n\n#### tag\nType: `Object`\n\nWill run [`semver`](https://github.com/isaacs/node-semver) functions & comparisons against passed version and highest\nrepo tag. Each object property name is a `semver` method, and property value is one argument being passed to it.\n\nExample:\n\n```js\ngrunt.initConfig({\n\tpkg: grunt.file.readJSON('package.json'),\n\tcheckrepo: {\n\t\tfoo: {\n\t\t\ttag: {\n\t\t\t\tvalid: '<%= pkg.version %>', // Check if pkg.version is valid semantic version\n\t\t\t\tlt: '<%= pkg.version %>',    // Check if highest repo tag is lower than pkg.version\n\t\t\t},\n\t\t}\n\t},\n});\n```\n\nAvailable methods:\n\n`valid`, `gt`, `gte`, `lt`, `lte`, `eq`, `neq`\n\n#### tagged\nType: `Boolean`\n\nChecks whether the last commit (HEAD) is or is not already tagged.\n\nExample:\n\n```js\ncheckrepo: {\n\tfoo: {\n\t\ttagged: true, // Require last commit (HEAD) to be tagged\n\t},\n\tbar: {\n\t\ttagged: false, // Require last commit (head) to not be tagged\n\t}\n}\n```\n\n#### clean\nType: `Boolean`\n\nCheck whether the repository is clean - has no unstaged changes.\n\nExample:\n\n```js\ncheckrepo: {\n\tfoo: {\n\t\tclean: true, // Require repo to be clean (no unstaged changes)\n\t},\n\tbar: {\n\t\tclean: false, // Require repo to be dirty (have unstaged changes)\n\t}\n}\n```\n\n## Usage Example\n\nTask with all available options:\n\n```js\ngrunt.initConfig({\n\tpkg: grunt.file.readJSON('package.json'),\n\tcheckrepo: {\n\t\tfoo: {\n\t\t\ttag: {\n\t\t\t\tvalid: '<%= pkg.version %>', // Check if pkg.version is valid semantic version\n\t\t\t\tgt: '<%= pkg.version %>',    // Check if highest repo tag is greater than pkg.version\n\t\t\t\tgte: '<%= pkg.version %>',   // Check if highest repo tag is greater or equal to pkg.version\n\t\t\t\tlt: '<%= pkg.version %>',    // Check if highest repo tag is lower than pkg.version\n\t\t\t\tlte: '<%= pkg.version %>',   // Check if highest repo tag is lower or equal than pkg.version\n\t\t\t\teq: '<%= pkg.version %>',    // Check if highest repo tag is equal to pkg.version\n\t\t\t\tneq: '<%= pkg.version %>',   // Check if highest repo tag is not equal to pkg.version\n\t\t\t},\n\t\t\ttagged: false, // Check if last repo commit (HEAD) is not tagged\n\t\t\tclean: true,   // Check if the repo working directory is clean\n\t\t}\n\t},\n});\n```",
  "readmeFilename": "README.md",
  "_id": "grunt-checkrepo@0.1.0",
  "_from": "grunt-checkrepo@*"
}
