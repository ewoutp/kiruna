{
  "name": "dockerode",
  "description": "Docker.io / Docker remote API implementation.",
  "version": "2.0.3",
  "author": {
    "name": "Pedro Dias",
    "email": "petermdias@gmail.com"
  },
  "maintainers": [
    {
      "name": "apocas",
      "email": "petermdias@gmail.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/apocas/dockerode.git"
  },
  "keywords": [
    "docker",
    "docker.io"
  ],
  "dependencies": {
    "docker-modem": "0.1.x",
    "underscore": "1.5.x"
  },
  "devDependencies": {
    "chai": "~1.7.0",
    "mocha": "~1.12.0",
    "memorystream": "~0.2.0"
  },
  "main": "./lib/docker",
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha -R spec"
  },
  "engines": {
    "node": ">= 0.8"
  },
  "contributors": [
    {
      "name": "Pedro Dias",
      "email": "petermdias@gmail.com",
      "url": "https://github.com/apocas"
    },
    {
      "name": "James Lal",
      "email": "jlal@mozilla.com",
      "url": "https://github.com/lightsofapollo"
    },
    {
      "name": "Everton Ribeiro",
      "email": "nuxlli@gmail.com",
      "url": "https://github.com/nuxlli"
    },
    {
      "name": "Sam Rijs",
      "email": "srijs@airpost.net",
      "url": "https://github.com/srijs"
    },
    {
      "name": "Mike MacCana",
      "email": "mike.maccana@gmail.com",
      "url": "https://github.com/mikemaccana"
    },
    {
      "url": "https://github.com/niclashoyer"
    },
    {
      "name": "Alex Wolfe",
      "email": "alexkwolfe@gmail.com",
      "url": "https://github.com/alexkwolfe"
    },
    {
      "name": "Vincent Woo",
      "email": "me@vincentwoo.com",
      "url": "https://github.com/vincentwoo"
    },
    {
      "name": "Adam Duncan",
      "url": "https://github.com/microadam"
    },
    {
      "name": "Geoffrey Bachelet",
      "email": "geoffrey.bachelet@gmail.com",
      "url": "https://github.com/ubermuda"
    },
    {
      "name": "Josh Matthews",
      "email": "josh@jmatthews.us",
      "url": "https://github.com/jmatth"
    },
    {
      "name": "Kishore Nallan",
      "email": "kishore@kishorelive.com",
      "url": "https://github.com/kishorenc"
    },
    {
      "name": "Mathias Buus",
      "email": "mathiasbuus@gmail.com",
      "url": "https://github.com/mafintosh"
    },
    {
      "name": "Shannon Poole",
      "email": "shannon.m.poole@gmail.com",
      "url": "https://github.com/shannonmpoole"
    },
    {
      "name": "Dan Williams",
      "email": "me+github@deedubs.com",
      "url": "https://github.com/deedubs"
    }
  ],
  "readme": "# dockerode\n\n[![NPM](https://nodei.co/npm/dockerode.png?downloads=true&stars=true)](https://nodei.co/npm/dockerode/)\n\nNot another Node.js Docker.io Remote API module.\n\nWhy `dockerode` is different from other Docker node.js modules:\n\n* **streams** - `dockerode` does NOT break any stream, it passes them to you allowing for some stream voodoo.\n* **stream demux** - Supports optional demultiplexing of the new attach stream system implemented in Remote API v1.6.\n* **entities** - containers and images are defined entities and not random static methods.\n* **run** - `dockerode` allow you to seamless run commands in a container ala `docker run`.\n* **tests** - `dockerode` really aims to have a good test set, allowing to follow `Docker` changes easily, quickly and painlessly.\n* **feature-rich** - **All** `Docker` Remote API features implemented.\n\n\n## Installation\n\n`npm install dockerode`\n\n## Usage\n\n * Input options are directly passed to Docker.io. Check [Docker Remote API documentation](http://docs.docker.io/reference/api/docker_remote_api/) for more details.\n * Return values are unchanged from Docker, official Docker.io documentation will also apply to them.\n * Check the tests for more examples.\n\n### Getting started\n\nTo use `dockerode` first you need to instantiate it:\n\n``` js\nvar Docker = require('dockerode');\nvar docker = new Docker({socketPath: '/var/run/docker.sock'});\nvar docker2 = new Docker({host: 'http://192.168.1.10', port: 3000});\nvar docker3 = new Docker({protocol:'http', host: '127.0.0.1', port: 3000});\nvar docker4 = new Docker({host: '127.0.0.1', port: 3000}); //defaults to http\n//...\n```\n\n### Manipulating a container:\n\n``` js\nvar container = docker.getContainer('71501a8ab0f8');\n\ncontainer.start(function (err, data) {\n  console.log(data);\n});\n\ncontainer.remove(function (err, data) {\n  console.log(data);\n});\n\n//...\n```\n\nYou may also specify default options for each container's operations, which will always be used for the specified container and operation.\n\n``` js\ncontainer.defaultOptions.start.Binds = [\"/tmp:/tmp:rw\"];\n```\n\n### Stopping all containers on a host\n\n``` js\ndocker.listContainers(function (err, containers) {\n  containers.forEach(function (containerInfo) {\n    docker.getContainer(containerInfo.Id).stop(cb);\n  });\n});\n```\n\n### Building an Image\n\n``` js\ndocker.buildImage('archive.tar', {t: imageName}, function (err, response){\n  //...\n});\n```\n\n### Creating a container:\n\n``` js\ndocker.createContainer({Image: 'ubuntu', Cmd: ['/bin/bash'], name: 'ubuntu-test'}, function (err, container) {\n  container.start(function (err, data) {\n    //...\n  });\n});\n//...\n```\n\n### Streams goodness:\n\n``` js\n//tty:true\ndocker.createContainer({ /*...*/ Tty: true /*...*/ }, function(err, container) {\n\n  /* ... */\n\n  container.attach({stream: true, stdout: true, stderr: true}, function (err, stream) {\n    stream.pipe(process.stdout);\n  });\n\n  /* ... */\n}\n\n//tty:false\ndocker.createContainer({ /*...*/ Tty: false /*...*/ }, function(err, container) {\n\n  /* ... */\n\n  container.attach({stream: true, stdout: true, stderr: true}, function (err, stream) {\n    //dockerode may demultiplex attach streams for you :)\n    container.modem.demuxStream(stream, process.stdout, process.stderr);\n  });\n\n  /* ... */\n}\n\ndocker.createImage({fromImage: 'ubuntu'}, function (err, stream) {\n  stream.pipe(process.stdout);\n});\n\n//...\n```\n\n### Equivalent of `docker run` in `dockerode`:\n\n* `image` - container image\n* `cmd` - command to be executed\n* `stream` - stream(s) which will be used for execution output.\n* `create_options` - options used for container creation. (optional)\n* `start_options` - options used for container start. (optional)\n* `callback` - callback called when execution ends.\n\n``` js\ndocker.run('ubuntu', ['bash', '-c', 'uname -a'], process.stdout, function (err, data, container) {\n  console.log(data.StatusCode);\n});\n```\n\nor, if you want to split stdout and stderr (you must to pass `Tty:false` as an option for this to work)\n\n``` js\ndocker.run('ubuntu', ['bash', '-c', 'uname -a'], [process.stdout, process.stderr], {Tty:false}, function (err, data, container) {\n  console.log(data.StatusCode);\n});\n```\n\nRun also returns an EventEmitter supporting the following events: container, stream, data. Allowing stuff like this:\n\n``` js\ndocker.run('ubuntu', ['bash', '-c', 'uname -a'], [process.stdout, process.stderr], {Tty:false}, function (err, data, container) {\n  //...\n}).on('container', function (container) {\n  container.defaultOptions.start.Binds = [\"/tmp:/tmp:rw\"];\n});\n```\n\n### Equivalent of `docker pull` in `dockerode`:\n\n* `repoTag` - container image name (optionally with tag)\n  `myrepo/myname:withtag`\n* `opts` - extra options passed to create image.\n* `callback` - callback called when execution ends.\n\n``` js\ndocker.pull('myrepo/myname:tag', function (err, stream) {  \n  // streaming output from pull...\n});\n```\n\n## Tests\n\nTests are implemented using `mocha` and `chai`. Run them with `npm test`.\n\n## License\n\nPedro Dias <abru.pt>\n\nLicensed under the Apache license, version 2.0 (the \"license\"); You may not use this file except in compliance with the license. You may obtain a copy of the license at:\n\n    http://www.apache.org/licenses/LICENSE-2.0.html\n\nUnless required by applicable law or agreed to in writing, software distributed under the license is distributed on an \"as is\" basis, without warranties or conditions of any kind, either express or implied. See the license for the specific language governing permissions and limitations under the license.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/apocas/dockerode/issues"
  },
  "homepage": "https://github.com/apocas/dockerode",
  "_id": "dockerode@2.0.3",
  "_from": "dockerode@2.x"
}
